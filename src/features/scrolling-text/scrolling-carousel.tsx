import React, { useEffect, useRef, useState, MutableRefObject } from 'react';type InfiniteScrollProps = {    children: React.ReactNode;};export function ScrollingCarousel({ children }: InfiniteScrollProps) {    const [looperInstances, setLooperInstances] = useState(2);    const outerRef: MutableRefObject<HTMLDivElement | null> = useRef(null);    const innerRef: MutableRefObject<HTMLDivElement | null> = useRef(null);    function resetAnimation() {        if (innerRef?.current) {            innerRef.current.setAttribute('data-animate', 'false');            setTimeout(() => {                if (innerRef?.current) {                    innerRef.current.setAttribute('data-animate', 'true');                }            }, 50);        }    }    useEffect(() => {        resetAnimation();    }, []);    return (        <div ref={outerRef} className={`h-fit w-full overflow-hidden`}>            <div                id={'inner-ref'}                className={`box-border flex h-fit w-max animate-none justify-center overflow-x-hidden [&[data-animate=true]]:animate-infinite-scroll`}                ref={innerRef}            >                {[...Array(looperInstances)].map((_, ind) => (                    <div id={'inner-div'} key={ind} className={'h-fit'}>                        {children}                    </div>                ))}            </div>        </div>    );}